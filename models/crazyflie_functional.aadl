package Crazyflie_functional

-- This package models the abstract functional chain of the Crazyflie,
-- from https://wiki.bitcraze.io/doc:crazyflie:dev:fimware:sensor_to_control

-- ADAM Q9 - Severity and liklihood values for reference
-- Catastrophic : constant aadlinteger => 1;
-- Hazardous : constant aadlinteger => 2;
-- Major : constant aadlinteger => 3;
-- Minor : constant aadlinteger => 4;
-- NoEffect : constant aadlinteger => 5;
-- Probable : constant EMV2::LikelihoodLabels => A;
-- Remote : constant EMV2::LikelihoodLabels => B;
-- ExtremelyRemote : constant EMV2::LikelihoodLabels => C;
-- ExtremelyImprobable : constant EMV2::LikelihoodLabels => D;

public

  abstract Accelero
  features
    Accelero_Out : out data port;

  flows
    f1 : flow source Accelero_Out {latency => 100 us .. 300 us; };		

  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz
  
  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    -- ADAM Q12 - Add error propogations
    error propagations
      Accelero_out: out propagation {ValueError};
    flows
      --When the sensor fails, its error is propagated through port Accelero_Out
      ErrorSource: error source Accelero_out {ValueError} when {ValueError};
     end propagations;
    -- ADAM A12 - END

    -- Adam Q9 - START
    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Loss of Accelero sensor readings";
           phases => ("all");
           description => "Accelero sensor failure";
           comment => "May be critical as no redundancy on UAV";
        ]) applies to Failed;
    -- Adam Q9 - END

  **};
  end Accelero;

  abstract Gyro
  features
    Gyro_Out : out data port;
    
  flows
    f1 : flow source Gyro_Out {latency => 100 us .. 300 us; };		
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    -- ADAM Q12 - Add error propogations
    error propagations
      Gyro_Out: out propagation {ValueError};
    flows
      --When the sensor fails, its error is propagated through port Accelero_Out
      ErrorSource: error source Gyro_Out {ValueError} when {ValueError};  
     end propagations;
    -- ADAM A12 - END

    -- Adam Q9 - START
    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Loss of Gyro sensor readings";
           phases => ("all");
           description => "Gyro sensor failure";
           comment => "May be critical as no redundancy on UAV";
        ]) applies to Failed;
    -- Adam Q9 - END

  **};
  end Gyro;

  abstract Magneto
  features
    Magneto_Out : out data port;
    
 flows
   f1 : flow source Magneto_Out {latency => 100 us .. 300 us; };		
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    -- ADAM Q12 - Add error propogations
    error propagations
      Magneto_Out: out propagation {ValueError};
    flows
      --When the sensor fails, its error is propagated through port Accelero_Out
      ErrorSource: error source Magneto_Out {ValueError} when {ValueError};
     end propagations;
    -- ADAM A12 - END

    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Loss of magneto sensor readings";
           phases => ("all");
           description => "Magneto sensor failure";
           comment => "May be critical as no redundancy on UAV";
        ]) applies to Failed;
  **};
  end Magneto;

  abstract Sensor_Fusion
  features
    Accelero_In : in data port;
    Gyro_In     : in data port;
    Magneto_In  : in data port;
    Data_F_Out  : out data port; -- Fusioned data
    
  flows
    f1 : flow path Accelero_In -> Data_F_Out {latency => 200 us .. 400 us; };	
    f2 : flow path Gyro_In -> Data_F_Out {latency => 200 us .. 400 us; };
    	   
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    -- ADAM Q12 - Add error propogations
    error propagations
      Data_F_Out: out propagation {ValueError};
    flows
      ErrorSource: error source Data_F_Out {ValueError} when {ValueError};
     end propagations;
    -- ADAM A12 - END

    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Failed sensor fusion";
           phases => ("all");
           description => "Sensor fusion failure";
           comment => "May be critical as no redundancy on UAV";
        ]) applies to Failed;
  **};
  end Sensor_Fusion;

  abstract Controller
  features
    Data_F_In : in data port;
    Gyro_In   : in data port;
    Motor_Out : out data port;
    TC : in data port;
  flows
  	f1 : flow path Data_F_In -> Motor_Out {latency => 200 us .. 400 us; };	
    f2 : flow path Gyro_In -> Motor_Out {latency => 200 us .. 400 us; };	
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 2 ms; --  500 Hz

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;
    
    -- ADAM Q12 - Add error propogations
    error propagations
      Motor_Out: out propagation {ValueError};
    flows
      ErrorSource: error source Motor_Out {ValueError} when {ValueError};
     end propagations;
    -- ADAM A12 - END

    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => D applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Controller unresponsive";
           phases => ("all");
           description => "Controller is failing";
           comment => "May be critical as no redundancy on UAV";
        ]) applies to Failed;
  **};
  end Controller;

  abstract Motors
  features
    Motor_In : in data port;
    
  flows
    f1 : flow sink Motor_In {latency => 100 us .. 500 us; };
    			
  properties
--    Dispatch_Protocol => Aperiodic;
    Dispatch_Protocol => Periodic;
    Period => 2ms;

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    properties
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "Motor failure";
           phases => ("all");
           description => "Motor is failing";
           comment => "Critical failure as control software requires all motors";
        ]) applies to Failed;
  **};
  end Motors;

  abstract Pilot
  features
	Order : out data port;
  end Pilot;

  system Crazyflie_Functional_Chain
  end Crazyflie_Functional_Chain;

  system implementation Crazyflie_Functional_Chain.impl
  subcomponents
    --  Sensing
    Acc        : abstract Accelero;
    Gyro       : abstract Gyro;
    Magneto    : abstract Magneto;

    Pilot      : abstract Pilot;

    --  Computing
    Fusion     : abstract Sensor_Fusion;
    Controller : abstract Controller;

    --  Acting
    Motors : abstract Motors;

  connections
    C1 : port Acc.Accelero_Out     -> Fusion.Accelero_In;
    C2 : port Gyro.Gyro_Out        -> Fusion.Gyro_In;
    C3 : port Magneto.Magneto_Out  -> Fusion.Magneto_In;

    C4 : port Gyro.Gyro_Out        -> Controller.Gyro_In;
    C5 : port Fusion.Data_F_Out    -> Controller.Data_F_In;

    C6 : port Controller.Motor_Out -> Motors.Motor_In;

    C7 : port Pilot.Order -> Controller.TC;

  flows
  	f_etef1 : end to end flow Gyro.f1 -> C2 -> Fusion.f2 -> C5 -> Controller.f1 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};
  	f_etef1bis : end to end flow Gyro.f1 -> C4 -> Controller.f2 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};
    f_etef2 : end to end flow Acc.f1 -> C1 -> Fusion.f1 -> C5 -> Controller.f1 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};

  -- ADAM Q9 - Add EMV2 to components
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;

    -- ADAM Q11 - START
    -- Operational state iff all subcomponents Operational
    -- Fail if a single component is failing
    composite error behavior
    states
      [ Acc.Operational
        and Gyro.Operational
        and Magneto.Operational
        and Fusion.Operational
        and Controller.Operational
        and Motors.Operational
      ]-> Operational;
      [ Acc.Failed
        or Gyro.Failed
        or Magneto.Failed
        or Fusion.Failed
        or Controller.Failed
        or Motors.Failed
      ]-> Failed;
    end composite;
    -- END

    properties
      -- ADAM Q9 - START
      -- This section could potentially be removed
      -- Pending piazza response as to whether or not this components is SW and hazards are restricted to HW only
      EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
                                        Distribution => Poisson;] applies to Failed;
      EMV2::severity => 1 applies to Failed;
      EMV2::likelihood => C applies to Failed;
      EMV2::hazards =>
        ([ crossreference => "";
           failure => "System failure";
           phases => ("all");
           description => "System is failing";
           comment => "There is a systematic failure";
        ]) applies to Failed;
      -- ADAM Q9 - END
  **};
  end Crazyflie_Functional_Chain.impl;

end Crazyflie_functional;